{
  "release_version": "v5.3.2",
  "scan_date": "2025-10-05T00:51:47.554964Z",
  "tool_version": "0.21.0",
  "total_components": 0,
  "vulnerabilities": [
    {
      "cve_id": "CVE-2025-47917",
      "component": "mbed_tls",
      "component_version": "3.6.2",
      "severity": "HIGH",
      "score": "8.9",
      "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:H/A:H",
      "description": "Mbed TLS before 3.6.4 allows a use-after-free in certain situations of applications that are developed in accordance with the documentation. The function mbedtls_x509_string_to_names() takes a head argument that is documented as an output argument. The documentation does not suggest that the function will free that pointer; however, the function does call mbedtls_asn1_free_named_data_list() on that argument, which performs a deep free(). As a result, application code that uses this function (relying only on documented behavior) is likely to still hold pointers to the memory blocks that were freed, resulting in a high risk of use-after-free or double-free. In particular, the two sample programs x509/cert_write and x509/cert_req are affected (use-after-free if the san string contains more than one DN).",
      "link": "https://nvd.nist.gov/vuln/detail/CVE-2025-47917"
    },
    {
      "cve_id": "CVE-2025-52496",
      "component": "mbed_tls",
      "component_version": "3.6.2",
      "severity": "HIGH",
      "score": "7.8",
      "vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:N",
      "description": "Mbed TLS before 3.6.4 has a race condition in AESNI detection if certain compiler optimizations occur. An attacker may be able to extract an AES key from a multithreaded program, or perform a GCM forgery.",
      "link": "https://nvd.nist.gov/vuln/detail/CVE-2025-52496"
    },
    {
      "cve_id": "CVE-2023-52160",
      "component": "wpa_supplicant",
      "component_version": "2.10",
      "severity": "MEDIUM",
      "score": "6.5",
      "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
      "description": "The implementation of PEAP in wpa_supplicant through 2.10 allows authentication bypass. For a successful attack, wpa_supplicant must be configured to not verify the network's TLS certificate during Phase 1 authentication, and an eap_peap_decrypt vulnerability can then be abused to skip Phase 2 authentication. The attack vector is sending an EAP-TLV Success packet instead of starting Phase 2. This allows an adversary to impersonate Enterprise Wi-Fi networks.",
      "link": "https://nvd.nist.gov/vuln/detail/CVE-2023-52160"
    },
    {
      "cve_id": "CVE-2025-27809",
      "component": "mbed_tls",
      "component_version": "3.6.2",
      "severity": "MEDIUM",
      "score": "5.4",
      "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:N",
      "description": "Mbed TLS before 2.28.10 and 3.x before 3.6.3, on the client side, accepts servers that have trusted certificates for arbitrary hostnames unless the TLS client application calls mbedtls_ssl_set_hostname.",
      "link": "https://nvd.nist.gov/vuln/detail/CVE-2025-27809"
    },
    {
      "cve_id": "CVE-2025-49600",
      "component": "mbed_tls",
      "component_version": "3.6.2",
      "severity": "MEDIUM",
      "score": "4.9",
      "vector": "CVSS:3.1/AV:P/AC:H/PR:N/UI:N/S:C/C:N/I:H/A:N",
      "description": "In MbedTLS 3.3.0 before 3.6.4, mbedtls_lms_verify may accept invalid signatures if hash computation fails and internal errors go unchecked, enabling LMS (Leighton-Micali Signature) forgery in a fault scenario. Specifically, unchecked return values in mbedtls_lms_verify allow an attacker (who can induce a hardware hash accelerator fault) to bypass LMS signature verification by reusing stale stack data, resulting in acceptance of an invalid signature. In mbedtls_lms_verify, the return values of the internal Merkle tree functions create_merkle_leaf_value and create_merkle_internal_value are not checked. These functions return an integer that indicates whether the call succeeded or not. If a failure occurs, the output buffer (Tc_candidate_root_node) may remain uninitialized, and the result of the signature verification is unpredictable. When the software implementation of SHA-256 is used, these functions will not fail. However, with hardware-accelerated hashing, an attacker could use fault injection against the accelerator to bypass verification.",
      "link": "https://nvd.nist.gov/vuln/detail/CVE-2025-49600"
    },
    {
      "cve_id": "CVE-2025-49601",
      "component": "mbed_tls",
      "component_version": "3.6.2",
      "severity": "MEDIUM",
      "score": "4.8",
      "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:L",
      "description": "In MbedTLS 3.3.0 before 3.6.4, mbedtls_lms_import_public_key does not check that the input buffer is at least 4 bytes before reading a 32-bit field, allowing a possible out-of-bounds read on truncated input. Specifically, an out-of-bounds read in mbedtls_lms_import_public_key allows context-dependent attackers to trigger a crash or limited adjacent-memory disclosure by supplying a truncated LMS (Leighton-Micali Signature) public-key buffer under four bytes. An LMS public key starts with a 4-byte type indicator. The function mbedtls_lms_import_public_key reads this type indicator before validating the size of its input.",
      "link": "https://nvd.nist.gov/vuln/detail/CVE-2025-49601"
    },
    {
      "cve_id": "CVE-2025-52497",
      "component": "mbed_tls",
      "component_version": "3.6.2",
      "severity": "MEDIUM",
      "score": "4.8",
      "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:L",
      "description": "Mbed TLS before 3.6.4 has a PEM parsing one-byte heap-based buffer underflow, in mbedtls_pem_read_buffer and two mbedtls_pk_parse functions, via untrusted PEM input.",
      "link": "https://nvd.nist.gov/vuln/detail/CVE-2025-52497"
    },
    {
      "cve_id": "CVE-2025-48965",
      "component": "mbed_tls",
      "component_version": "3.6.2",
      "severity": "MEDIUM",
      "score": "4.0",
      "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:N/I:N/A:L",
      "description": "Mbed TLS before 3.6.4 has a NULL pointer dereference because mbedtls_asn1_store_named_data can trigger conflicting data with val.p of NULL but val.len greater than zero.",
      "link": "https://nvd.nist.gov/vuln/detail/CVE-2025-48965"
    },
    {
      "cve_id": "CVE-2025-49087",
      "component": "mbed_tls",
      "component_version": "3.6.2",
      "severity": "MEDIUM",
      "score": "4.0",
      "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:N/A:N",
      "description": "In Mbed TLS 3.6.1 through 3.6.3 before 3.6.4, a timing discrepancy in block cipher padding removal allows an attacker to recover the plaintext when PKCS#7 padding mode is used.",
      "link": "https://nvd.nist.gov/vuln/detail/CVE-2025-49087"
    }
  ],
  "summary": {
    "total_vulnerabilities": 9,
    "by_severity": {
      "CRITICAL": 0,
      "HIGH": 2,
      "MEDIUM": 7,
      "LOW": 0
    }
  },
  "metadata": {
    "scanner": "esp-idf-security-dashboard",
    "scan_method": "git-tag",
    "docker_image": null
  }
}